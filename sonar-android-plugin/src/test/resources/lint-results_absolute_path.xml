<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.1.2">

    <issue
            id="SuspiciousImport"
            severity="Warning"
            message="Don&apos;t include android.R here; use a fully qualified name for each usage instead"
            category="Correctness"
            priority="9"
            summary="Checks for &apos;import android.R&apos; statements, which are usually accidental"
            explanation="Importing `android.R` is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project&apos;s R class it not present.

Once the import is there you might get a lot of &quot;confusing&quot; error messages because of course the fields available on `android.R` are not the ones you&apos;d expect from just looking at your own `R` class."
            errorLine1="import android.R;"
            errorLine2="~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/java/org/sonarsource/app/TestViolations.java"
                line="3"
                column="1"/>
    </issue>

    <issue
            id="SuspiciousImport"
            severity="Warning"
            message="Don&apos;t include android.R here; use a fully qualified name for each usage instead"
            category="Correctness"
            priority="9"
            summary="Checks for &apos;import android.R&apos; statements, which are usually accidental"
            explanation="Importing `android.R` is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project&apos;s R class it not present.

Once the import is there you might get a lot of &quot;confusing&quot; error messages because of course the fields available on `android.R` are not the ones you&apos;d expect from just looking at your own `R` class."
            errorLine1="import android.R;"
            errorLine2="~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/java/org/sonarsource/app/TestViolations.java"
                line="3"
                column="1"/>
    </issue>

    <issue
            id="NewApi"
            severity="Error"
            message="Call requires API level 9 (current min is 7): android.os.StrictMode#enableDefaults"
            category="Correctness"
            priority="6"
            summary="Finds API accesses to APIs that are not supported in all targeted API versions"
            explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
            errorLine1="        StrictMode.enableDefaults();"
            errorLine2="                   ~~~~~~~~~~~~~~"
            quickfix="adt">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/java/org/sonarsource/app/TestViolations.java"
                line="10"
                column="20"/>
    </issue>

    <issue
            id="NewApi"
            severity="Error"
            message="Call requires API level 9 (current min is 7): android.os.StrictMode#enableDefaults"
            category="Correctness"
            priority="6"
            summary="Finds API accesses to APIs that are not supported in all targeted API versions"
            explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
            errorLine1="        StrictMode.enableDefaults();"
            errorLine2="                   ~~~~~~~~~~~~~~"
            quickfix="adt">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/java/org/sonarsource/app/TestViolations.java"
                line="10"
                column="20"/>
    </issue>

    <issue
            id="RtlHardcoded"
            severity="Warning"
            message="Consider adding android:paddingStart=&quot;@dimen/activity_horizontal_margin&quot; to better support right-to-left layouts"
            category="Bi-directional Text"
            priority="5"
            summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
            explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
            errorLine1="    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;"
            errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/res/layout/fragment_main.xml"
                line="5"
                column="5"/>
    </issue>

    <issue
            id="RtlHardcoded"
            severity="Warning"
            message="Consider adding android:paddingStart=&quot;@dimen/activity_horizontal_margin&quot; to better support right-to-left layouts"
            category="Bi-directional Text"
            priority="5"
            summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
            explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
            errorLine1="    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;"
            errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/res/layout/fragment_main.xml"
                line="5"
                column="5"/>
    </issue>

    <issue
            id="RtlHardcoded"
            severity="Warning"
            message="Consider adding android:paddingEnd=&quot;@dimen/activity_horizontal_margin&quot; to better support right-to-left layouts"
            category="Bi-directional Text"
            priority="5"
            summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
            explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
            errorLine1="    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;"
            errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/res/layout/fragment_main.xml"
                line="6"
                column="5"/>
    </issue>

    <issue
            id="RtlHardcoded"
            severity="Warning"
            message="Consider adding android:paddingEnd=&quot;@dimen/activity_horizontal_margin&quot; to better support right-to-left layouts"
            category="Bi-directional Text"
            priority="5"
            summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
            explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
            errorLine1="    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;"
            errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
                file="/home/benzonico/Development/SonarSource/sonar-tests-languages/it-android/projects/SonarAndroidSample/app/src/main/res/layout/fragment_main.xml"
                line="6"
                column="5"/>
    </issue>

</issues>
